ГРАФЫ

V, E <= VxV (дек. произв.)

E - edges
V - vershina

G = <V, E>
 
- если E - упор. пары -> граф ориентированный
- с петлями/без
- мультиграф, если существуют кратные ребра (между двумя вершинами несколько ребер)
- связный/несвязный
- циклический/ациклический

связный + ациклический = дерево
ациклический = лес

путь - последовательность вершин и ребер
полный граф - все вершины соединены

смежные - два ребра имеют одну вершину
инцидентные - 

изоморфные графы — графы A и B, если можно установить биекцию 
между их вершинами и соответствующими им рёбрами

#define fromVert 1
#define toVert -1
#define b 15
#include <stdio.h>
#include <stdlib.h>


int is_or (int V, int S[V][V]){
	for (int i = 0; i<v; i++)
		for (int j = i; i<v; j++)
			if(S[i][j] != S[j][i])
				return 0;
	return 1;
}

void f1(int V, int S[V][V], int ans[V], int k){
	for (int i = 0; i<V; i++)
		ans[i] = S[i][k];
	return;
}

void coh(int V, int, E, int C[E][V], int ans[V], int k){
	int i, j;
	for (i = 0; i<V; i++) ans[i] = 0;
	for (j = 0; j<E; j++) 
		if(C[j][k] == fromVert){
			i = 0;
			while (i<V && C[j][i] != toVert)
				i++;
			if (i<V) ans[i] = 1;
			else ans[k] = 1;
		}
	return;
}

void Adj2Coh (int V, int E, int C[E][V], int S[V][V]){
	int i, j, v, w, flag;
	for (i = 0; i<V; i++)
		for (j = 0; j<V; j++)
			S[i][j] = 0;
	for (j = 0; i<E; i++){
		flag = 0; //сколько элементов отличных от 0
		j = 0;
		v = w = -1;
		while ((j<V)&&(flag<2)){
			if(C[i][j] == fromVert){
				v = j;
				flag++;
			}
			else
				if(C[i][j] == toVert){
					w = j;
					flag++;
				}
			j++;
		}
		if(!flag){
			printf("The edge %d is empty!", i);
			return;
		}
		else if(flag == 1){
			if(V != 1) S[v][v] = 1;
			else printf ("Incorrect loop for vertex %d", w);
		}
		else if(flag == 2 && v != -1 && w != -1)
			S[v][w] = 1;
		else 
			printf ("The C matrix is broken");	
	}
	return;
}

void Coh2Adj (int V, int E_ptr, int S[V][V], int ***C_ptr){
	int i, j, k = -1, size;
	int **C = (int**)malloc((size = 3*b)*sizeof(int*));
	for (i = 0; i<V; i++)
		for(j = 0; j<V; j++){
			if(S[i][j]){
				if(k == size-1)
					C = (int**)realloc(C, (size+=b)*sizeof(int*));
				C[++k] = (int*)calloc(V, sizeof(int));
				C[k][i] = fromVert;
				C[k][j] = toVert;
			}
		}
	*C_ptr = C = realloc(C, (k+1)sizeof(int*));
	*E_ptr = k+1;
	return;
}
